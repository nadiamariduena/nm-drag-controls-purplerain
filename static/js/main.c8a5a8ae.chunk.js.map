{"version":3,"sources":["components/navigation/Header.js","components/3dScenes/Tropic_drag-test.js","components/home/Home.js","App.js","reportWebVitals.js","index.js"],"names":["Component","style","height","TropicDragTest","sceneSetup","width","eleModelBlOne","clientWidth","clientHeight","camera","THREE","window","innerWidth","innerHeight","position","z","scene","loader","renderer","alpha","antialias","setSize","shadowMap","enabled","appendChild","domElement","addCustomSceneObjects","geometryDrag","materialDrag","color","transparent","cubesDrag","x","forEach","c","add","controls","DragControls","outputEncoding","autoUpdate","gammaFactor","directionalLight","set","castShadow","shadow","spotLight","visible","startAnimationLoop","requestID","requestAnimationFrame","rotation","y","render","handleWindowResize","aspect","updateProjectionMatrix","this","addEventListener","removeEventListener","cancelAnimationFrame","className","ref","Home","Fragment","App","basename","process","id","exact","path","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c8a5a8ae.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nclass Header extends Component {\n  render() {\n    return (\n      <header>\n        <div className=\"header-wrapper\">\n          <nav>\n            <div className=\"logo\">\n              <h3>NM</h3>\n            </div>\n\n            <ul>\n              <li>portfolio</li>\n              <li>contact</li>\n            </ul>\n          </nav>{\" \"}\n          {/* ------------  */}\n          {/* ------------  */}\n          {/* ------------  */}\n          <div className=\"bio-nav\">\n            <p>\n              I'm Nadia Mariduena, a Web &amp; 3D designer based in Berlin//\n              Germany.\n            </p>\n          </div>\n        </div>\n      </header>\n    );\n  }\n}\n\nexport default Header;\n","import React, { Component } from \"react\";\nimport * as THREE from \"three\";\nimport { DragControls } from \"three/examples/jsm/controls/DragControls\";\n//\n//\nconst style = {\n  height: 600, // we can control scene size by setting container dimensions\n};\n//\n\nclass TropicDragTest extends Component {\n  componentDidMount() {\n    // Here you are calling all the functions below\n    this.sceneSetup();\n    this.addCustomSceneObjects();\n    this.startAnimationLoop();\n    //\n    window.addEventListener(\"resize\", this.handleWindowResize);\n  }\n  //\n  //\n  componentWillUnmount() {\n    // this is related to the event listeners that cause problems when using the resizing\n    window.removeEventListener(\"resize\", this.handleWindowResize);\n    window.cancelAnimationFrame(this.requestID);\n\n    // this.controls.dispose();\n  }\n  /*\n\n\n                                            ***  1   ***\n\n\n\n  */\n  sceneSetup = () => {\n    //\n    //                WIDTH/HEIGHT\n    // --------------------------------------------\n    //\n    const width = this.eleModelBlOne.clientWidth;\n    const height = this.eleModelBlOne.clientHeight;\n    //\n    // --------------------------------------------\n\n    this.camera = new THREE.PerspectiveCamera(\n      75,\n      window.innerWidth / window.innerHeight,\n      1,\n      1000\n    );\n    // this.camera.position.y = 10;\n    //\n    this.camera.position.z = 3;\n    //\n    this.scene = new THREE.Scene();\n    // this.scene.background = new THREE.Color(0xffffff);\n    //\n    //\n    this.loader = new THREE.TextureLoader();\n    //\n    // ---------------------------------------\n    //                  RENDERER\n    // ---------------------------------------\n    //\n    this.renderer = new THREE.WebGL1Renderer({\n      alpha: true,\n      // will make the edges smooth\n      antialias: true,\n    });\n    //\n    this.renderer.setSize(width, height);\n    // BG color from the scene\n    // showMap is connected to the shadows in any object/model\n    this.renderer.shadowMap.enabled = true;\n    // here you append it to the jsx\n    this.eleModelBlOne.appendChild(this.renderer.domElement); // mount using React ref\n    // document.appendChild(this.renderer.domElement);  //before\n    //\n\n    //\n    //\n\n    //\n    //\n  };\n\n  /*\n\n\n                                            ***  2  ***\n\n\n\n  */\n  addCustomSceneObjects = () => {\n    //\n\n    //\n    //\n\n    this.geometryDrag = new THREE.BoxGeometry();\n    //const material: THREE.MeshPhongMaterial = new THREE.MeshPhongMaterial({ color: 0xff0000, transparent: true })\n    //const cube: THREE.Mesh = new THREE.Mesh(geometry, material)\n    //scene.add(cube)\n\n    this.materialDrag = [\n      new THREE.MeshPhongMaterial({\n        // wireframe: true,\n        // map: THREE.ImageUtils.loadTexture(\"/images/mario-bros-3.gif\"),\n        color: 0xeeff00,\n        transparent: true,\n      }),\n      new THREE.MeshPhongMaterial({ color: 0xff0000, transparent: true }),\n      new THREE.MeshPhongMaterial({ color: 0xff5a00, transparent: true }),\n    ];\n    //\n    this.cubesDrag = [\n      new THREE.Mesh(this.geometryDrag, this.materialDrag[0]),\n      new THREE.Mesh(this.geometryDrag, this.materialDrag[1]),\n      new THREE.Mesh(this.geometryDrag, this.materialDrag[2]),\n    ];\n    //\n    this.cubesDrag[0].position.x = -2;\n    this.cubesDrag[1].position.x = 0;\n    this.cubesDrag[2].position.x = 2;\n    //\n    // add \"each\" cubesDrag to the scene\n    this.cubesDrag.forEach((c) => this.scene.add(c));\n    //\n    //\n    //\n    //\n\n    //\n    //---------------------------\n    //    DRAG CONTROLS\n    //---------------------------\n    this.controls = new DragControls(\n      this.cubesDrag,\n      this.camera,\n      this.renderer.domElement\n    );\n    //\n    //\n\n    //----------------------------------\n    //         BLENDER  MODELS\n    //----------------------------------\n    //\n\n    //---------------------\n    //   Directional Light\n    //---------------------\n    //\n    // //\n    this.renderer.outputEncoding = THREE.sRGBEncoding;\n    this.renderer.shadowMap.enabled = true;\n    this.renderer.shadowMap.autoUpdate = true;\n    this.renderer.gammaFactor = 2.2;\n\n    const directionalLight = new THREE.DirectionalLight(0xffffff);\n    directionalLight.position.set(5, -1, 100);\n\n    // position as follow , the light comes from x:-1000, comes from: y and the last comes from : z\n    directionalLight.position.set(1000, 1000, 1000);\n    directionalLight.castShadow = true;\n    directionalLight.shadow.camera = new THREE.OrthographicCamera(\n      -100,\n      200,\n      -200,\n      200,\n      0.5,\n      5000\n    );\n    // //\n    this.scene.add(directionalLight);\n    // The light points to the flat ground\n    // this.directionalLight.target = this.plane;  //dont add this\n    //\n    //\n    //THIS LIGHT IS ON THE BOTTOM\n    //---------------------\n    //     spotLight FF5733\n    //---------------------\n    //\n\n    // With the light you can see the colors you added to each geometry in the materials\n    this.spotLight = new THREE.SpotLight(0xffffff, 0.5); //intensity:   0.5);\n    // spotLight.position.set( 0 , 10 , 0 );\n    this.spotLight.position.set(5, -50, 0); //x, y , z   original (5, -50, 0);\n    // (2, 32, 32); with this settings the light will be on the front\n    this.spotLight.castShadow = true;\n    //\n    // this will remove the shadows\n    this.spotLight.visible = true;\n    //\n    this.scene.add(this.spotLight);\n    // //\n    //\n    //\n  };\n  /*\n\n\n                                            ***  3   ***\n\n\n\n  */\n\n  startAnimationLoop = () => {\n    //\n\n    this.requestID = window.requestAnimationFrame(this.startAnimationLoop);\n\n    this.cubesDrag[0].rotation.x += 0.01;\n    this.cubesDrag[0].rotation.y += 0.011;\n    this.cubesDrag[1].rotation.x += 0.012;\n    this.cubesDrag[1].rotation.y += 0.013;\n    this.cubesDrag[2].rotation.x += 0.014;\n    this.cubesDrag[2].rotation.y += 0.015;\n\n    this.renderer.render(this.scene, this.camera);\n  };\n  /*\n\n\n\n\n\n\n  */\n  handleWindowResize = () => {\n    const width = this.eleModelBlOne.clientWidth;\n    const height = this.eleModelBlOne.clientHeight;\n    //\n    // updated renderer\n    this.renderer.setSize(width, height);\n    // updated **camera** aspect ratio\n    this.camera.aspect = width / height;\n    // That is the Three.js optimization: you can group multiple camera changes into a block with only one\n    this.camera.updateProjectionMatrix();\n  };\n  /*\n\n\n\n\n\n\n  */\n\n  render() {\n    return (\n      <div className=\"scene-oblivion\">\n        {/* --------------------- */}\n\n        {/* --------------------- */}\n        {/* --------------------- */}\n        <div\n          className=\"modelBleOne\"\n          style={style}\n          ref={(ref) => (this.eleModelBlOne = ref)}\n        ></div>\n        {/* --------------------- */}\n        {/* --------------------- */}\n        {/* --------------------- */}\n      </div>\n    );\n  }\n}\n\nexport default TropicDragTest;\n","import React from \"react\";\n\nimport Header from \"../navigation/Header\";\nimport TropicDragTest from \"../3dScenes/Tropic_drag-test\";\n// import HomePortfolioGallery from \"./HomePortfolioGallery\";\n// import ContactSection from \"./HomeContact\";\n// import FooterTextAnimation from \"./HomeFooterText\";\n\n//\n\nfunction Home() {\n  return (\n    <React.Fragment>\n      {/* --------------- */}\n      {/* --------------- */}\n      {/* --------------- */}\n      {/* <Header /> */}\n      {/* --------------- */}\n      {/* --------------- */}\n      {/* --------------- */}\n      <section className=\"container-section-scene-home\">\n        {/* ----------------------------------------- */}\n        {/*             FLAG SECTION                  */}\n        {/* ----------------------------------------- */}\n        <div className=\"scene-threejs\">\n          <div className=\"wrapper-flag-scene-threejs\">\n            {/* ----------------------------------------- */}\n\n            <div className=\"wrapper-scene-oblivion\">\n              <TropicDragTest />\n            </div>\n            {/* ----------------------------------------- */}\n\n            {/* <div className=\"scene-description-home\">\n              <div className=\"wrapper-scene-description-home\">\n                <h3 className=\"h3-text-img-home\">3D TESTS</h3>\n                <p>\n                  I created this 3d scenes using threejs during my time at DCI.\n                  Additional information about the references used for this\n                  project, can be found in my github.\n                </p>\n              </div>\n            </div> */}\n            {/* ----------------------------------------- */}\n          </div>\n        </div>\n      </section>\n      {/* ----------------------------------------- */}\n      {/* ----------------------------------------- */}\n      {/* ----------------------------------------- */}\n      {/* ----------------------------------------- */}\n      {/* ----------------------------------------- */}\n      {/* ----------------------------------------- */}\n      {/* <section className=\"container-gallery\">\n        <HomePortfolioGallery />\n      </section> */}\n\n      {/* ----------------------------------------- */}\n      {/* ----------------------------------------- */}\n      {/* ----------------------------------------- */}\n      {/* ----------------------------------------- */}\n      {/* ----------------------------------------- */}\n      {/* ----------------------------------------- */}\n\n      {/* ----------------------------------------- */}\n      {/*             CONTACT SECTION               */}\n      {/* ----------------------------------------- */}\n      {/* <ContactSection /> */}\n      {/* --------------- */}\n      {/* <FooterTextAnimation /> */}\n    </React.Fragment>\n  );\n}\n\nexport default Home;\n","import React, { Component } from \"react\";\nimport { BrowserRouter, Switch, Route } from \"react-router-dom\";\n\n//\n\n//\nimport Home from \"./components/home/Home\";\n\nclass App extends Component {\n  render() {\n    return (\n      <BrowserRouter basename={process.env.PUBLIC_URL}>\n        <div className=\"App\">\n          <div id=\"wrapper-app\">\n            <Switch>\n              <Route exact path=\"/\" component={Home} />\n              {/* <Route exact path=\"/portfolio\" component={Portfolio} /> */}\n            </Switch>\n          </div>\n        </div>\n      </BrowserRouter>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./scss/main.scss\";\nimport App from \"./App\";\n\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}